{"version":3,"sources":["Search.js","Utils.js","modules/actions.js","PreviousSearches.js","App.js","serviceWorker.js","modules/imagesReducer.js","modules/store.js","index.js"],"names":["Search","handleChangeText","e","searchImages","_this","props","target","value","shouldShowTypingMessage","handleSaveSearch","_this$props","saveSearch","searchText","renderSaveSearchContent","_this$props2","isSearchSaveLoading","shouldShowSuccessMessage","react_default","a","createElement","className","concat","onClick","handleShowHistory","togglePreviousSearches","_this$props3","this","isPreviousSearchesVisible","togglePreviousSearchesButtonText","type","onChange","Component","composeSearchTextAsTags","tags","Array","isArray","length","join","loadImages","_ref","_ref$searchMode","searchMode","_ref$page","page","urlForSearch","fetch","then","response","json","data","images","photos","photo","pages","catch","error","console","asyncLocalStorage","setItem","key","Promise","resolve","reject","setTimeout","localStorage","getItem","PreviousSearches","state","selectedPreviousItems","onPreviousSearchSelect","searchValue","isSelected","setState","Object","toConsumableArray","searchToDeleteIndex","indexOf","selectedPreviousItemsAfterDelete","splice","createOnSearchClickCallback","onSearchClick","loadPreviousSearches","previousSearches","isVisible","PreviousSearches_SearchOptionsButtons","onSingleSearchClick","onUnionSearchClick","onIntersectionSearchClick","PreviousSearches_PreviousSearchesList","mapDispatchToProps","dispatch","result","JSON","parse","payload","connect","imagesData","PreviousSearchesList","keys","map","index","PreviousSearches_PreviousSearchesListItem","includes","PreviousSearchesListItem","_ref2","SearchOptionsButtons","_ref3","numberOfSelectedPreviousItemsToSearch","App","isInfiniteScrollingEnded","loadMoreImages","currentPage","totalPages","arguments","undefined","_ref$shouldShowTyping","showTypingMessage","searchModeToDisplay","debouncedSearchImages","debounce","renderImagesContainerContent","isLoadingNewImages","isTypingMessageVisible","App_ImagesCollection","setImageContainerRef","ref","imagesContainerRef","_this2","onscroll","isScrollEnded","scrollTop","offsetHeight","scrollHeight","Search_Search","src_PreviousSearches","stringify","ImagesCollection","imageId","image","url","farm","server","id","secret","composeImageUrl","alt","src","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","objectSpread","defineProperty","createStore","applyMiddleware","thunk","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.990ccaf1.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default class Search extends Component {\n  handleChangeText = (e) => {\n    const {searchImages} = this.props\n\n    searchImages(e.target.value, {\n      shouldShowTypingMessage: true\n    })\n  }\n\n  handleSaveSearch = () => {\n    const {saveSearch, searchText} = this.props\n\n    if (searchText === '') {\n      return\n    }\n\n    saveSearch()\n  }\n\n  renderSaveSearchContent = () => {\n    const {isSearchSaveLoading, shouldShowSuccessMessage, searchText} = this.props\n    if (isSearchSaveLoading) {\n      return <div className=\"title save-loading-message\">saving...</div>\n    } else if (shouldShowSuccessMessage) {\n      return <div className=\"title save-success-message\">search saved Successfully!</div>\n    }\n\n    return <div\n            className={`title save-search-button ${searchText === '' ? 'disabled' : ''}`}\n            onClick={this.handleSaveSearch}\n           >\n            Save this search\n           </div>\n  }\n\n  handleShowHistory = () => {\n    const {togglePreviousSearches} = this.props\n\n    togglePreviousSearches()\n  }\n\n  render() {\n    const {searchText, isPreviousSearchesVisible} = this.props\n    const togglePreviousSearchesButtonText = `${isPreviousSearchesVisible ? 'Hide' : 'Show'} previous`\n\n    return (\n      <div>\n        <div className=\"search-container\">\n          <div className=\"title\">Image Gallery</div>\n          <div className=\"title sub-title\">Search for images</div>\n          <input type=\"text\" className=\"search-input\" value={searchText} onChange={this.handleChangeText}></input>\n          <div className=\"search-controls\">\n            {this.renderSaveSearchContent()}\n            <div className=\"title show-history-search-button\" onClick={this.handleShowHistory}>\n              {togglePreviousSearchesButtonText}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","export const composeSearchTextAsTags = (tags) => {\n  if (Array.isArray(tags)){\n    tags = tags.length > 1 ? tags.join(',') : tags[0]\n  }\n\n  return tags\n}\n\nexport const loadImages = (tags, {searchMode='any', page=1}) => {\n  const urlForSearch = `https://api.flickr.com/services/rest/?method=flickr.photos.search&safe_search=1&format=json&nojsoncallback=1&api_key=bac9f1ccfd854f27894fd47c4f01b1e8&content_type=1&is_getty=1&tags=${tags}&tag_mode=${searchMode}&page=${page}`\n\n  return fetch(urlForSearch)\n    .then(response => response.json())\n    .then(data => {\n      return {\n        images: data.photos.photo,\n        page: data.photos.page,\n        pages: data.photos.pages\n      }\n    })\n    .catch(error => console.error(error))\n}\n\nexport const composeImageUrl = ({farm, server, id, secret}) => {\n  return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n}\n","import {loadImages} from '../Utils.js'\n\nexport const loadPreviousSearches = () => {\n  return (dispatch) => {\n    asyncLocalStorage.getItem('previousSearches')\n      .then((result) => {\n        const previousSearches = JSON.parse(result) || {}\n        dispatch({\n          type: 'IMAGES@LOAD_PREVIOUS_SEARCHES_SUCCESS',\n          payload: {previousSearches}\n        })\n      })\n  }\n}\n\nexport const searchImages = (searchText, searchMode, page) => {\n  return (dispatch) => {\n    if (!searchText) {\n      return dispatch({type: 'IMAGES@CLEAR_IMAGES'})\n    }\n\n    dispatch({type: 'IMAGES@IMAGES_LOADING'})\n\n    loadImages(searchText, {searchMode, page}).then(({images, page, pages}) => {\n      dispatch({\n        type: 'IMAGES@IMAGES_LOADED_SUCCESS',\n        payload: {images, page, pages}\n      })\n    })\n  }\n}\n\nexport const loadMoreImages = (searchText, currentPage) => {\n  return (dispatch) => {\n    loadImages(searchText, {page: currentPage}).then(({images, page, pages}) => {\n      dispatch({\n        type: 'IMAGES@IMAGES_LOADED_MORE_SUCCESS',\n        payload: {images, page, pages}\n      })\n    })\n  }\n}\n\nexport const showTypingMessage = () => {\n  return {type: 'IMAGES@SHOW_TYPING_MESSAGE'}\n}\n\nexport const saveSearch = (searchText) => {\n  return (dispatch) => {\n    dispatch({type: 'IMAGES@SEARCH_SAVE_LOADING'})\n\n    asyncLocalStorage.getItem('previousSearches')\n      .then((result) => {\n        const previousSearches = JSON.parse(result) || {}\n\n        previousSearches[searchText] = ''\n        return asyncLocalStorage.setItem('previousSearches', JSON.stringify(previousSearches))\n      })\n      .then(() => {\n        dispatch({\n          type: 'IMAGES@SEARCH_SAVE_SUCCESS',\n          payload: {searchText}\n        })\n\n        setTimeout(() => {\n          dispatch({type: 'IMAGES@HIDE_SAVE_SUCCESS_MESSAGE'})\n        }, 2000)\n      })\n  }\n}\n\nexport const togglePreviousSearches = () => {\n  return {type: 'IMAGES@TOGGLE_PREVIOUS_SEARCHES'}\n}\n\n// I am making this async in order\n// to resemble a real database\nconst asyncLocalStorage = {\n  setItem: (key, value) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(localStorage.setItem(key, value))\n      }, 500)\n    })\n  },\n  getItem: (key) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(localStorage.getItem(key))\n      }, 500)\n    })\n  }\n}\n","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport {loadPreviousSearches} from './modules/actions.js'\n\nclass PreviousSearches extends Component {\n  state = {\n    selectedPreviousItems: []\n  }\n\n  componentDidMount () {\n    const {loadPreviousSearches} = this.props\n\n    loadPreviousSearches()\n  }\n\n  onPreviousSearchSelect = (searchValue, isSelected) => {\n    const {selectedPreviousItems} = this.state\n\n    if (isSelected) {\n      this.setState({\n        selectedPreviousItems: [\n          ...selectedPreviousItems,\n          searchValue\n        ]\n      })\n    } else {\n      const searchToDeleteIndex = selectedPreviousItems.indexOf(searchValue)\n      const selectedPreviousItemsAfterDelete = [...selectedPreviousItems]\n\n      selectedPreviousItemsAfterDelete.splice(searchToDeleteIndex, 1)\n\n      this.setState({selectedPreviousItems: selectedPreviousItemsAfterDelete})\n    }\n  }\n\n  createOnSearchClickCallback = (searchMode) => {\n    return () => this.onSearchClick(searchMode)\n  }\n\n  onSearchClick = (searchMode) => {\n    const {searchImages} = this.props\n    const {selectedPreviousItems} = this.state\n\n    searchImages(selectedPreviousItems, {searchMode})\n  }\n\n  render() {\n    const {previousSearches, isVisible} = this.props\n    const {selectedPreviousItems} = this.state\n\n    return (\n      <div className={`previous-search-side-bar ${isVisible ? 'visible' : ''}`}>\n        <div className=\"search-options-container\">\n          <SearchOptionsButtons\n            selectedPreviousItems={selectedPreviousItems}\n            onSingleSearchClick={this.createOnSearchClickCallback()}\n            onUnionSearchClick={this.createOnSearchClickCallback('any')}\n            onIntersectionSearchClick ={this.createOnSearchClickCallback('all')}\n          />\n        </div>\n        <div className=\"previous-searches-list\">\n          {previousSearches &&\n            <PreviousSearchesList\n              selectedPreviousItems={selectedPreviousItems}\n              onPreviousSearchSelect={this.onPreviousSearchSelect}\n              previousSearches={previousSearches}\n            />\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  previousSearches: state.imagesData.previousSearches\n})\n\nconst mapDispatchToProps = {loadPreviousSearches}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviousSearches)\n\nconst PreviousSearchesList = ({previousSearches, onPreviousSearchSelect, selectedPreviousItems}) => {\n  if (previousSearches.length === 0) {\n    return <div className=\"no-prev-searches\">No previous searches yet</div>\n  }\n\n  return Object.keys(previousSearches).map((searchValue, index) => {\n    return <PreviousSearchesListItem\n             key={`searches-list-item-${index}`}\n             isSelected={selectedPreviousItems.includes(searchValue)}\n             searchValue={searchValue}\n             onPreviousSearchSelect={onPreviousSearchSelect}\n           />\n  })\n}\n\nconst PreviousSearchesListItem = ({searchValue, onPreviousSearchSelect, isSelected}) => {\n  return (\n    <div\n     className={`previous-search-item ${isSelected ? 'selected' : ''}`}\n     onClick={() => onPreviousSearchSelect(searchValue, !isSelected)}\n    >\n      <div className=\"previous-search-label\" >{searchValue}</div>\n    </div>\n  )\n}\n\nconst SearchOptionsButtons = ({selectedPreviousItems, onSingleSearchClick, onUnionSearchClick, onIntersectionSearchClick}) => {\n  const numberOfSelectedPreviousItemsToSearch = Object.keys(selectedPreviousItems).length\n\n  if (numberOfSelectedPreviousItemsToSearch === 1) {\n    return (\n      <div className=\"previous-search-controls\" onClick={onSingleSearchClick}>\n        <div className=\"search-button\">Search</div>\n      </div>\n    )\n  } else if (numberOfSelectedPreviousItemsToSearch > 1) {\n    return (\n      <div className=\"previous-search-controls\">\n        <div className=\"search-button\" onClick={onUnionSearchClick}>Search - \"OR\"</div>\n        <div className=\"search-button\" onClick={onIntersectionSearchClick}>Search - \"AND\"</div>\n      </div>\n    )\n  }\n  else {\n    return null\n  }\n}\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {debounce} from 'lodash'\nimport Search from './Search.js'\nimport PreviousSearches from './PreviousSearches.js'\nimport {composeImageUrl, composeSearchTextAsTags} from './Utils.js'\nimport {searchImages, loadMoreImages, saveSearch, showTypingMessage, togglePreviousSearches} from './modules/actions.js'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    searchText: '',\n    isInfiniteScrollingEnded: false\n  }\n\n  componentDidMount() {\n    this.imagesContainerRef.onscroll = (e) => {\n      const isScrollEnded = (this.imagesContainerRef.scrollTop + this.imagesContainerRef.offsetHeight) === this.imagesContainerRef.scrollHeight\n      const isScrollExist = this.imagesContainerRef.scrollHeight > this.imagesContainerRef.offsetHeight\n\n      if (isScrollExist && isScrollEnded) {\n        this.loadMoreImages()\n      }\n    }\n  }\n\n  loadMoreImages = () => {\n    const {currentPage, totalPages, loadMoreImages} = this.props\n    const {searchText} = this.state\n\n    if (currentPage < totalPages) {\n      loadMoreImages(searchText, currentPage + 1)\n    }\n    else {\n      this.setState({isInfiniteScrollingEnded: true})\n    }\n  }\n\n  searchImages = (searchValue, {searchMode, shouldShowTypingMessage=false, page}={}) => {\n    const {showTypingMessage} = this.props\n    const searchText = composeSearchTextAsTags(searchValue)\n    const searchModeToDisplay = searchMode ? ` - (${searchMode === 'any' ? 'OR' : 'AND'})` : ''\n\n    this.setState({\n      searchText: `${searchText}${searchModeToDisplay}`,\n      isInfiniteScrollingEnded: false\n    })\n    if (shouldShowTypingMessage) {\n      showTypingMessage()\n    }\n\n    this.debouncedSearchImages(searchText, searchMode, page)\n  }\n\n  debouncedSearchImages = debounce((searchText, searchMode, page) => {\n    const {searchImages} = this.props\n\n    searchImages(searchText, searchMode, page)\n  }, 500)\n\n  saveSearch = () => {\n    const {searchText} = this.state\n    const {saveSearch} = this.props\n\n    saveSearch(searchText)\n  }\n\n  renderImagesContainerContent = () => {\n    const {images, isLoadingNewImages, isTypingMessageVisible} = this.props\n    const {searchText} = this.state\n\n    if (isLoadingNewImages) {\n      return <div className=\"message loading-message\">loading...</div>\n    }\n    return <ImagesCollection images={images} searchText={searchText} isTypingMessageVisible={isTypingMessageVisible} />\n  }\n\n  setImageContainerRef = ref => {\n    this.imagesContainerRef = ref\n  }\n\n  render() {\n    const {isSearchSaveLoading, shouldShowSuccessMessage, togglePreviousSearches, isPreviousSearchesVisible} = this.props\n    const {isInfiniteScrollingEnded} = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"image-gallery\">\n          <Search\n            searchImages={this.searchImages}\n            saveSearch={this.saveSearch}\n            isSearchSaveLoading={isSearchSaveLoading}\n            shouldShowSuccessMessage={shouldShowSuccessMessage}\n            searchText={this.state.searchText}\n            togglePreviousSearches={togglePreviousSearches}\n            isPreviousSearchesVisible={isPreviousSearchesVisible}\n          />\n          <div className=\"images-container\" ref={this.setImageContainerRef}>\n            {this.renderImagesContainerContent()}\n            {isInfiniteScrollingEnded &&\n              <div className=\"no-more-results message\">No more images to show</div>\n            }\n          </div>\n        </div>\n        <PreviousSearches searchImages={this.searchImages} isVisible={isPreviousSearchesVisible} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  images: state.imagesData.images,\n  currentPage: state.imagesData.currentPage,\n  totalPages: state.imagesData.totalPages,\n  isLoadingNewImages: state.imagesData.isLoadingNewImages,\n  isSearchSaveLoading: state.imagesData.isSearchSaveLoading,\n  isPreviousSearchesVisible: state.imagesData.isPreviousSearchesVisible,\n  shouldShowSuccessMessage: state.imagesData.shouldShowSuccessMessage,\n  isTypingMessageVisible: state.imagesData.isTypingMessageVisible\n})\n\nconst mapDispatchToProps = {searchImages, loadMoreImages, saveSearch, showTypingMessage, togglePreviousSearches}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\nconst ImagesCollection = ({images, searchText, isTypingMessageVisible}) => {\n  if (isTypingMessageVisible) {\n    return <div className=\"message\">Typing... :)</div>\n  } else if (!images) {\n    return <div className=\"message\">Please search images!</div>\n  } else if (images.length === 0) {\n    return <div className=\"message\">{`No results for \"${searchText}\".`}</div>\n  } else {\n    return Object.keys(images).map((imageId) => {\n      const image = images[imageId]\n\n      const url = composeImageUrl(image)\n      return (<img key={image.id} alt=\"\" className=\"image-item\" src={url} />)\n    })\n\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  images: null,\n  currentPage: null,\n  totalPages: null,\n  isLoadingNewImages: false,\n  isSearchSaveLoading: false,\n  shouldShowSuccessMessage: false,\n  isTypingMessageVisible: false,\n  isPreviousSearchesVisible: false,\n  previousSearches: []\n}\n\nexport default (state = initialState, {type, payload}) => {\n  switch (type) {\n    case 'IMAGES@IMAGES_LOADING': {\n      return {\n        ...state,\n        isLoadingNewImages: true\n      }\n    }\n    case 'IMAGES@IMAGES_LOADED_SUCCESS': {\n      return {\n        ...state,\n        isLoadingNewImages: false,\n        isTypingMessageVisible: false,\n        images: payload.images,\n        currentPage: payload.page,\n        totalPages: payload.pages\n      }\n    }\n    case 'IMAGES@IMAGES_LOADED_MORE_SUCCESS': {\n      return {\n        ...state,\n        isLoadingNewImages: false,\n        isTypingMessageVisible: false,\n        currentPage: payload.page,\n        totalPages: payload.pages,\n        images: [\n          ...state.images,\n          ...payload.images\n        ]\n      }\n    }\n    case 'IMAGES@CLEAR_IMAGES': {\n      return {\n        ...state,\n        isLoadingNewImages: false,\n        isTypingMessageVisible: false,\n        images: null\n      }\n    }\n    case 'IMAGES@SEARCH_SAVE_LOADING': {\n      return {\n        ...state,\n        isSearchSaveLoading: true,\n        isTypingMessageVisible: false\n      }\n    }\n    case 'IMAGES@SHOW_TYPING_MESSAGE': {\n      return {\n        ...state,\n        isTypingMessageVisible: true\n      }\n    }\n    case 'IMAGES@SEARCH_SAVE_SUCCESS': {\n      return {\n        ...state,\n        isSearchSaveLoading: false,\n        shouldShowSuccessMessage: true,\n        previousSearches: {\n          ...state.previousSearches,\n          [payload.searchText]: ''\n        }\n      }\n    }\n    case 'IMAGES@HIDE_SAVE_SUCCESS_MESSAGE': {\n      return {\n        ...state,\n        shouldShowSuccessMessage: false\n      }\n    }\n    case 'IMAGES@LOAD_PREVIOUS_SEARCHES_SUCCESS': {\n      return {\n        ...state,\n        previousSearches: payload.previousSearches\n      }\n    }\n    case 'IMAGES@TOGGLE_PREVIOUS_SEARCHES': {\n      return {\n        ...state,\n        isPreviousSearchesVisible: !state.isPreviousSearchesVisible\n      }\n    }\n    default:\n      return state\n  }\n}\n","import {createStore, applyMiddleware, combineReducers} from 'redux'\nimport thunk from 'redux-thunk'\nimport imagesReducer from './imagesReducer.js'\n\nconst rootReducer = combineReducers({\n  imagesData: imagesReducer\n})\n\nexport default createStore(rootReducer, applyMiddleware(thunk))\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider as ReduxProvider} from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport store from './modules/store.js'\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}